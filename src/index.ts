#!/usr/bin/env node
import inquirer from "inquirer";
import { exec, execSync } from "child_process";
import { promisify } from "util";
import {
  checkbox,
  search,
  confirm,
  Separator,
  select,
} from "@inquirer/prompts";
import { toolCategories } from "./models/tools";
import { log } from "console";
import fs from "fs/promises";
import { PathLike } from "fs";
import {
  checkPermissions,
  handlePermissionError,
  installNvm,
} from "./utility/permissions-handler";
import { ides } from "./models/ides";

const findSelectedTool = (tools: Tool[], selectedTools: string[]): Tool[] => {
  return tools.filter((tool) => selectedTools.includes(tool.value));
};

const findSelectedToolNames = (tools: Tool[]): string[] => {
  return tools.map((tool) => tool.name);
};

async function main() {
  console.log("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è Mac");

  // –®–∞–≥ 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
  const isInstallBrew = await confirm({
    message: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew?`,
  });
  if (isInstallBrew) {
    try {
      execSync("which brew", { stdio: "ignore" });
      console.log("‚úÖ Homebrew —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew...");
      execSync(
        '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
      );
    }
  }

  // –®–∞–≥ 0.5: –°–∫–∞—á–∏–≤–∞–µ–º –≥–∏—Ç
  const isInstallGit = await confirm({
    message: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git?`,
  });

  if (isInstallGit) {
    try {
      execSync("git --version", { stdio: "ignore" });
      console.log("‚úÖ Git —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git...");
      execSync("brew install git");
    }
  }

  // –®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫—É—é IDE —Å–∫–∞—á–∞—Ç—å
  const ideAnswers = await checkbox({
    message: "–í—ã–±–µ—Ä–∏—Ç–µ ide –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
    choices: ides,
  });

  // –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const categoryAnswer = await search({
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
    source: () => {
      return toolCategories.map((cat) => ({
        name: cat.name,
        value: cat.value,
      }));
    },
  });

  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const toolChoices: Tool[] = toolCategories
    .filter((cat) => cat.value === categoryAnswer)
    .flatMap((cat) =>
      cat.tools.map((tool) => ({
        name: tool.name,
        value: tool.value,
        installCommand: tool.installCommand,
      }))
    );

  // –®–∞–≥ 3: –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const toolAnswers = await checkbox({
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
    choices: toolChoices,
  });

  if (toolAnswers.length === 0 && ideAnswers.length === 0) {
    console.log("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
    return;
  }

  const selectedTools = findSelectedTool(toolChoices, toolAnswers);
  const selectedIdes = findSelectedTool(ides, ideAnswers);
  const selectedToolNames = findSelectedToolNames(selectedTools);
  const selectedIdeNames = findSelectedToolNames(selectedIdes);

  const toolsText =
    (selectedToolNames ?? []).length > 0
      ? `\n  - ${(selectedToolNames ?? []).join("\n  - ")}`
      : "";

  const idesText =
    (selectedIdeNames ?? []).length > 0
      ? `\n  - ${(selectedIdeNames ?? []).join("\n  - ")}`
      : "";

  // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  const confirmAnswer = await confirm({
    message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${toolsText}${idesText}?`,
  });

  if (confirmAnswer) {
  } else {
    console.log("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.");
    return;
  }

  // –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  console.log("–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...");

  const toolsToInstall = [...selectedTools, ...selectedIdes];
  console.log(toolsToInstall);

  for (const tool of toolsToInstall) {
    console.log(`\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${tool.name}...`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è npm
    if (categoryAnswer === "frontend") {
      if (!(await checkPermissions("/usr/local/lib/node_modules"))) {
        console.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm-–ø–∞–∫–µ—Ç–æ–≤!");
      }
    }

    if (tool.value === "npm") {
      installNvm();
    } else {
      try {
        execSync(tool.installCommand);
        console.log(`‚úÖ ${tool.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ${tool.name}:`);
        console.error(error);
      }
    }

    console.log("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

  }
}

main();
