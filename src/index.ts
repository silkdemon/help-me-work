#!/usr/bin/env node
import inquirer from "inquirer";
import { exec, execSync } from "child_process";
import { promisify } from "util";
import { checkbox, search, confirm, Separator } from "@inquirer/prompts";
import { toolCategories } from "./models/tools";
import { log } from "console";

async function main() {
  console.log("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è Mac");

  // –®–∞–≥ 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
  const isInstallBrew = await confirm({
    message: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew?`,
  });
  if (isInstallBrew) {
    try {
      execSync("which brew", { stdio: "ignore" });
      console.log("‚úÖ Homebrew —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew...");
      execSync(
        '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
      );
    }
  }

  // –®–∞–≥ 0.5: –°–∫–∞—á–∏–≤–∞–µ–º –≥–∏—Ç
  const isInstallGit = await confirm({
    message: `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git?`,
  });

  if (isInstallGit) {
    try {
      execSync("git --version", { stdio: "ignore" });
      console.log("‚úÖ Git —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git...");
      execSync(
        '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
      );
    }
  }

  // –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  try {
    const categoryAnswer = await search({
      message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
      source: () => {
        return toolCategories.map((cat) => ({
          name: cat.name,
          value: cat.value,
        }));
      },
    });

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const toolChoices = toolCategories
      .filter((cat) => cat.value === categoryAnswer)
      .flatMap((cat) =>
        cat.tools.map((tool) => ({
          name: tool.name,
          value: tool.value,
          installCommand: tool.installCommand,
        }))
      );

    // –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const toolAnswers = await checkbox({
      message: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
      choices: toolChoices,
    });

    console.log(toolAnswers);
    
    if (toolAnswers.length === 0) {
      console.log("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
      return;
    }

    const selectedToolNames: string[] = toolChoices
      .filter((tool) => toolAnswers.includes(tool.value))
      .map((tool) => tool.name);

    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    const confirmAnswer = await confirm({
      message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: \n  - ${selectedToolNames.join(
        "\n  - "
      )}?`,
    });

    if (confirmAnswer) {
    } else {
      console.log("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.");
      return;
    }

    // –®–∞–≥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    //   console.log('–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');

    //   for (const tool of selectedTools) {
    //     console.log(\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${tool.name}...);
    //     try {
    //       const { stdout, stderr } = await execPromise(tool.installCommand);
    //       console.log(stdout);
    //       if (stderr) console.error(stderr);
    //       console.log(‚úÖ ${tool.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ);
    //     } catch (error) {
    //       console.error(‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ${tool.name}:);
    //       console.error(error);
    //     }
    //   }

    //   console.log('\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
  }
}

main();
